# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        os: [ windows-latest ]
        # ubuntu-latest,

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
        architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

    - name: Setup Environment Variables
      shell: bash
      run: |
        echo "NUITKA_CACHE_DIR=${{ github.action_path }}/nuitka/cache" >> $GITHUB_ENV
        echo "PYTHON_VERSION=$(python --version | awk '{print $2}' | cut -d '.' -f 1,2)" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 poetry
        poetry install --no-root
        poetry shell
        # if [ -f pyproject.toml ]; then poetry update; fi
        # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Cache Nuitka cache directory
      uses: actions/cache@v4
      with:
        path: ${{ env.NUITKA_CACHE_DIR }}
        key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-nuitka-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-
          ${{ runner.os }}-python-
          ${{ runner.os }}-

#    - name: Build Executable with Nuitka
#      uses: Nuitka/Nuitka-Action@main
#      with:
#         nuitka-version: main
#         script-name: app/launcher.py
#         # many more Nuitka options available, see action doc, but it's best
#         # to use nuitka-project: options in your code, so e.g. you can make
#         # a difference for macOS and create an app bundle there.
#         onefile: false
#         standalone: true
#         mingw64: true
#         lto: no
#         show-memory: true
#         disable-console: true
#         working-directory: app
#         enable-plugins: pyside6

    - name: Build with Nuitka
      shell: bash
      run: |
        set -e
        python -m nuitka --mingw64 --standalone --lto --show-memory --disable-console --enable-plugins=pyside6 app/launcher.py
      working-directory: app


    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
         name: ${{ runner.os }} Build
         path: | # match what's created for the 3 OSes
            build/*.exe
            build/*.bin
            build/*.app/**/*
